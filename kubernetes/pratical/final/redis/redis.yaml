apiVersion: apps/v1
kind: Deployment
metadata:
  name: ctfd-redis-deployment
  namespace: redis
  labels:
    ctfd.redis.deployment: ctfd-redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      ctfd.redis.pod: ctfd-redis-pod
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        #        io.kompose.network/convert-internal: 'true'
        ctfd.redis.pod: ctfd-redis-pod
    spec:
      containers:
      - image: redis:4
        name: redis
        volumeMounts:
        - mountPath: /data
          name: redis-pvc
        resources:
          requests:
            memory: "100Mi"
          limits:
            memory: "1000Mi"
      restartPolicy: Always
      tolerations:
        - key: "type"
          operator: "Equal"
          value: "challs"
          effect: "NoSchedule"
      volumes:
        - name: redis-pvc
          persistentVolumeClaim:
            claimName: redis-pvc
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: ctfd-redis-service
  namespace: redis
  labels:
    ctfd.redis.service: ctfd-redis-service
spec:
  ports:
  - name: 'redis'
    port: 6379
    targetPort: 6379
  selector:
    ctfd.redis.pod: ctfd-redis-pod
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: redis
  labels:
    ctfd.redis.deployment: ctfd-redis-deployment
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ctfd-redis-hpa
  namespace: redis
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ctfd-redis-deployment
  minReplicas: 1
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      policies:
      - type: Pods
        value: 3
        periodSeconds: 60
      - type: Percent
        value: 10
        periodSeconds: 60
      stabilizationWindowSeconds: 300
